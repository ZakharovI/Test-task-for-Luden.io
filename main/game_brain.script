local button_width = 100
local button_height = 50
local button_x1 = 10
local button_x2 = button_x1 + button_width
local button_y1 = 10
local button_y2 = button_y1 + button_height
local window_width, window_height



function in_button(x, y)
	return (button_x1 <= x and x <= button_x2) and (button_y1 <= y and y <= button_y2)
end


function ij_to_xy(i, j, self)
	pos = go.get_position()
	d = (window_width / self.field_size)
	pos.x = d * j + d / 2
	pos.y = window_height - d * i - d / 2
	return pos
end

function scale(self)
	return window_width / (self.field_size * 100)
end


function in_grey_circle(x, y, self)
	myp = vmath.vector3()
	myp.x = x
	myp.y = y
	for i = 0, self.field_size - 1 do
		for j = 0, self.field_size - 1 do
			pos = ij_to_xy(i, j, self)
			pos.z = 0
			if (vmath.length(pos - myp) <= 50 * scale(self)) then
				if (self.used[i][j] == 0) then
					self.touched_i = i
					self.touched_j = j
					return true
				else
					return false
				end
			end			
		end
	end
	return false
end


function init_field(self)
	for i = 0, self.field_size - 1 do
		self.field[i] = {}
		for j = 0, self.field_size - 1 do
			self.field[i][j] = 0
		end
	end

	cnt = self.field_size * self.field_size / 2
	math.randomseed(os.time())
	for counter = 0, cnt - 1 do
		i = math.random(0, 9)
		j = math.random(0, 9)
		while (self.field[i][j] == 1) do
			i = math.random(0, 9)
			j = math.random(0, 9)
		end
		self.field[i][j] = 1
	end
end


function set_used(self)
	self.used = {}
	for i = 0, self.field_size - 1 do
		self.used[i] = {}
		for j = 0, self.field_size - 1 do
			self.used[i][j] = 0
		end
	end
end


function create(i, j, type, self)
	if (type == "grey") then
		return factory.create("#grey_circle_factory", ij_to_xy(i, j, self), nil, {score = 0}, scale(self))
	elseif (type == "blue") then
		return factory.create("#blue_circle_factory", ij_to_xy(i, j, self), nil, {score = 0}, scale(self))
	elseif (type == "red") then
		return factory.create("#red_circle_factory", ij_to_xy(i, j, self), nil, {score = 0}, scale(self))
	end
end


function delete_go_field(self)
	--io.write("DELETE\n")
	for i = 0, self.field_size - 1 do
		for j = 0, self.field_size - 1 do
			go.delete(self.go_field[i][j])
			--io.write('[', i, '][', j, '] ')
		end
		--io.write('\n')
	end
end


function set_grey_go_field(self, first_call)
	if (not first_call) then
		delete_go_field(self)
	end
	self.go_field = {}
	for i = 0, self.field_size - 1 do
		self.go_field[i] = {}
		for j = 0, self.field_size - 1 do
			--self.go_field[i][j] = grey
			self.go_field[i][j] = create(i, j, "grey", self)
		end
	end
end


function set_color_go_field(self)
	delete_go_field(self)
	self.go_field = {}
	for i = 0, self.field_size - 1 do
		self.go_field[i] = {}
		for j = 0, self.field_size - 1 do
			if (self.field[i][j] == 0) then
				--self.go_field[i][j] = blue
				self.go_field[i][j] = create(i, j, "blue", self)
			else
				--self.go_field[i][j] = red
				self.go_field[i][j] = create(i, j, "red", self)
			end
		end
	end
end


function init(self)
	print("started")
	self.game_state = 0
	--[[
	0 - welcome
	1 - preparation
	2 - game 
	3 - end
	--]]
	self.field = {}
	self.field_size = 10
	self.current_color = -1
	self.score = 0
	self.go_field = {}
	self.used = {}
	self.touched_i = 0
	self.touched_j = 0
	self.button_text = factory.create("#start_factory", vmath.vector3(button_x1 + button_width / 2, button_y1 + button_height / 2, 1))
	window_width, window_height = window.get_size()
	print(window_width)
	print(window_height)
	set_used(self)
	set_grey_go_field(self, true)
	msg.post('#you_lose', "disable")
	msg.post('#you_won', "disable")
	msg.post(".", "acquire_input_focus")
end


function update(self, dt)
	msg.post("#score", "update_score", { score = self.score })
	print(self.score)
	if (self.game_state == 1) then
		self.timer = self.timer - dt 
		if (self.timer < 0) then
			self.game_state = 2
			set_grey_go_field(self, false);
		end
	end
end


function restart(self)
	init_field(self)
	self.game_state = 1
	self.timer = 3.0
	self.current_color = -1
	self.score = 0
	
	for i = 0, self.field_size - 1 do
		for j = 0, self.field_size - 1 do
			io.write(self.field[i][j], ' ')
		end
		io.write('\n')
	end
	set_used(self)
	set_color_go_field(self);
end


function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		io.write(action.x, ' ', action.y, '\n')
		print("DONT TOUCH ME THERE")
		if (self.game_state == 0) then
			if (in_button(action.x, action.y)) then                      -- start button
				go.delete(self.button_text)
				self.button_text = factory.create("#restart_factory", vmath.vector3(button_x1 + button_width / 2, button_y1 + button_height / 2, 1))
				restart(self)
			end
		elseif (self.game_state == 1) then
			if (in_button(action.x, action.y)) then                      -- restart button
				restart(self)
			end
		elseif (self.game_state == 2) then
			if (in_button(action.x, action.y)) then                      -- restart button
				restart(self)
			elseif (in_grey_circle(action.x, action.y, self)) then                  -- grey circle
				
				-- recolor circle
				go.delete(self.go_field[self.touched_i][self.touched_j])
				if (self.field[self.touched_i][self.touched_j] == 0) then
					self.go_field[self.touched_i][self.touched_j] = create(self.touched_i, self.touched_j, "blue", self)
				else
					self.go_field[self.touched_i][self.touched_j] = create(self.touched_i, self.touched_j, "red", self)
				end
				self.used[self.touched_i][self.touched_j] = 1

				print()
				if (self.current_color == -1 or self.current_color == self.field[self.touched_i][self.touched_j]) then    -- color match or self.color == -1
					self.score = self.score + 1
					self.current_color = self.field[self.touched_i][self.touched_j]
					if (self.score == 50) then
						msg.post('#you_won', "enable")
						self.game_state = 3
					end
				else
					msg.post('#you_lose', "enable")
					self.game_state = 3
				end
			end
		elseif (self.game_state == 3) then
			if (in_button(action.x, action.y)) then                      -- restart button
				msg.post('#you_lose', "disable")
				msg.post('#you_won', "disable")
				restart(self)
			end
		end
	end
end
